// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Entry = exports.Entry = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var InflatedEntry = exports.InflatedEntry = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineEntry()
defineInflatedEntry()

function defineEntry () {
  var enc = [
    encodings.string,
    encodings.bytes,
    encodings.varint
  ]

  Entry.encodingLength = encodingLength
  Entry.encode = encode
  Entry.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = enc[1].encodingLength(obj.value)
      length += 1 + len
    }
    if (!defined(obj.trie)) throw new Error("trie is required")
    var len = enc[1].encodingLength(obj.trie)
    length += 1 + len
    if (defined(obj.clock)) {
      for (var i = 0; i < obj.clock.length; i++) {
        if (!defined(obj.clock[i])) continue
        var len = enc[2].encodingLength(obj.clock[i])
        length += 1 + len
      }
    }
    if (defined(obj.inflate)) {
      var len = enc[2].encodingLength(obj.inflate)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      enc[1].encode(obj.value, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (!defined(obj.trie)) throw new Error("trie is required")
    buf[offset++] = 26
    enc[1].encode(obj.trie, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.clock)) {
      for (var i = 0; i < obj.clock.length; i++) {
        if (!defined(obj.clock[i])) continue
        buf[offset++] = 32
        enc[2].encode(obj.clock[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    if (defined(obj.inflate)) {
      buf[offset++] = 40
      enc[2].encode(obj.inflate, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: null,
      trie: null,
      clock: [],
      inflate: 0
    }
    var found0 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.value = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        obj.trie = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 4:
        obj.clock.push(enc[2].decode(buf, offset))
        offset += enc[2].decode.bytes
        break
        case 5:
        obj.inflate = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineInflatedEntry () {
  var Feed = InflatedEntry.Feed = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineFeed()

  function defineFeed () {
    var enc = [
      encodings.bytes
    ]

    Feed.encodingLength = encodingLength
    Feed.encode = encode
    Feed.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.key)) throw new Error("key is required")
      var len = enc[0].encodingLength(obj.key)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.key)) throw new Error("key is required")
      buf[offset++] = 10
      enc[0].encode(obj.key, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        key: null
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.key = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    encodings.string,
    encodings.bytes,
    encodings.varint,
    Feed
  ]

  InflatedEntry.encodingLength = encodingLength
  InflatedEntry.encode = encode
  InflatedEntry.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = enc[1].encodingLength(obj.value)
      length += 1 + len
    }
    if (!defined(obj.trie)) throw new Error("trie is required")
    var len = enc[1].encodingLength(obj.trie)
    length += 1 + len
    if (defined(obj.clock)) {
      for (var i = 0; i < obj.clock.length; i++) {
        if (!defined(obj.clock[i])) continue
        var len = enc[2].encodingLength(obj.clock[i])
        length += 1 + len
      }
    }
    if (defined(obj.inflate)) {
      var len = enc[2].encodingLength(obj.inflate)
      length += 1 + len
    }
    if (defined(obj.feeds)) {
      for (var i = 0; i < obj.feeds.length; i++) {
        if (!defined(obj.feeds[i])) continue
        var len = enc[3].encodingLength(obj.feeds[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      enc[1].encode(obj.value, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (!defined(obj.trie)) throw new Error("trie is required")
    buf[offset++] = 26
    enc[1].encode(obj.trie, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.clock)) {
      for (var i = 0; i < obj.clock.length; i++) {
        if (!defined(obj.clock[i])) continue
        buf[offset++] = 32
        enc[2].encode(obj.clock[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    if (defined(obj.inflate)) {
      buf[offset++] = 40
      enc[2].encode(obj.inflate, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.feeds)) {
      for (var i = 0; i < obj.feeds.length; i++) {
        if (!defined(obj.feeds[i])) continue
        buf[offset++] = 50
        varint.encode(enc[3].encodingLength(obj.feeds[i]), buf, offset)
        offset += varint.encode.bytes
        enc[3].encode(obj.feeds[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: null,
      trie: null,
      clock: [],
      inflate: 0,
      feeds: []
    }
    var found0 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.value = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        obj.trie = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 4:
        obj.clock.push(enc[2].decode(buf, offset))
        offset += enc[2].decode.bytes
        break
        case 5:
        obj.inflate = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 6:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.feeds.push(enc[3].decode(buf, offset, offset + len))
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
